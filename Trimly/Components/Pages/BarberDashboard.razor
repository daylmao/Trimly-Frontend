@page "/barber-dashboard"
@using Trimly.Core.Application.DTOs.Appointment
@using Trimly.Core.Application.Pagination
@using Trimly.Core.Domain.Enums
@using Trimly.Infrastructure.Api
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IAppointmentHttpService _appointmentService
@attribute [Authorize(Roles = ("Barber"))]

<body class="min-h-screen bg-background text-text">
<div class="flex h-screen overflow-hidden">

    <aside class="hidden md:flex md:flex-col w-64 bg-surface border-r border-gray-700">
        <div class="p-4 border-b border-gray-700">
            <a href="/" class="text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
                Trimly
            </a>
        </div>

        <nav class="flex-1 overflow-y-auto py-4">
            <ul class="space-y-1 px-2">
                <li>
                    <NavLink href="/barbero-dashboard" class="flex items-center px-4 py-2 text-sm rounded-md bg-primary/10 text-primary">
                        <i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i>
                        Dashboard
                    </NavLink>
                </li>
            </ul>

            <div class="mt-8 px-4">
                <h3 class="px-2 text-xs font-semibold text-gray-400 uppercase tracking-wider">
                    Configuración
                </h3>
                <ul class="mt-2 space-y-1">
                    <li>
                        <NavLink href="/barber/profile" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
                            <i class="fas fa-user-circle w-5 h-5 mr-3"></i>
                            Mi Perfil
                        </NavLink>
                    </li>
                    <li>
                        <NavLink href="/barber/settings" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
                            <i class="fas fa-cog w-5 h-5 mr-3"></i>
                            Ajustes
                        </NavLink>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- User -->
        <div class="p-4 border-t border-gray-700">
            <div class="flex items-center">
                <img src="https://via.placeholder.com/40" alt="Avatar" class="w-8 h-8 rounded-full mr-3">
                <div>
                    <p class="text-sm font-medium">Miguel Ángel</p>
                    <p class="text-xs text-gray-400">Barbero</p>
                </div>
                <button id="logout-sidebar-button" class="ml-auto text-gray-400 hover:text-white">
                    <i class="fas fa-sign-out-alt"></i>
                </button>
            </div>
        </div>
    </aside>

    <!-- Mobile sidebar toggle -->
    <div class="md:hidden fixed bottom-4 right-4 z-50">
        <button id="mobile-menu-button" class="bg-primary text-white p-3 rounded-full shadow-lg">
            <i class="fas fa-bars"></i>
        </button>
    </div>

    <!-- Mobile sidebar (hidden by default) -->
    <div id="mobile-sidebar" class="fixed inset-0 z-40 hidden">
        <div class="absolute inset-0 bg-black bg-opacity-50" id="mobile-sidebar-backdrop"></div>
        <div class="absolute inset-y-0 left-0 w-64 bg-surface transform transition-transform duration-300 -translate-x-full" id="mobile-sidebar-content">
            <!-- Mobile sidebar content (same as desktop) -->
            <!-- Logo -->
            <div class="p-4 border-b border-gray-700 flex justify-between items-center">
                <a href="/" class="text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
                    Trimly
                </a>
                <button id="close-mobile-menu" class="text-gray-400 hover:text-white">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <!-- Navigation -->
            <nav class="flex-1 overflow-y-auto py-4">
                <ul class="space-y-1 px-2">
                    <li>
                        <NavLink href="/barbero-dashboard" class="flex items-center px-4 py-2 text-sm rounded-md bg-primary/10 text-primary">
                            <i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i>
                            Dashboard
                        </NavLink>
                    </li>
                </ul>

                <div class="mt-8 px-4">
                    <h3 class="px-2 text-xs font-semibold text-gray-400 uppercase tracking-wider">
                        Configuración
                    </h3>
                    <ul class="mt-2 space-y-1">
                        <li>
                            <a href="/barber/profile" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
                                <i class="fas fa-user-circle w-5 h-5 mr-3"></i>
                                Mi Perfil
                            </a>
                        </li>
                        <li>
                            <a href="/barbero/settings" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
                                <i class="fas fa-cog w-5 h-5 mr-3"></i>
                                Ajustes
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- User -->
            <div class="p-4 border-t border-gray-700">
                <div class="flex items-center">
                    <img src="https://via.placeholder.com/40" alt="Avatar" class="w-8 h-8 rounded-full mr-3">
                    <div>
                        <p class="text-sm font-medium">Miguel Ángel</p>
                        <p class="text-xs text-gray-400">Barbero</p>
                    </div>
                    <button @onclick="Logout" id="logout-mobile-button" class="ml-auto text-gray-400 hover:text-white">
                        <i class="fas fa-sign-out-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Top Header -->
        <header class="bg-surface/80 backdrop-blur-md shadow-md z-10">
            <div class="px-4 py-4 flex justify-between items-center">
                <div>
                    <h1 class="text-xl font-semibold">Dashboard</h1>
                    <p class="text-sm text-gray-400">Bienvenido, Miguel Ángel</p>
                </div>

                <div class="flex items-center space-x-4">
                </div>
            </div>
        </header>

        <!-- Main Content Area -->
        <main class="flex-1 overflow-y-auto bg-background p-4">
            <!-- Quick Stats -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <!-- Today's Appointments -->
            </div>

            <!-- Today's Schedule -->
            <div class="bg-surface rounded-lg shadow-md p-6 mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold">Agenda de Hoy</h2>
                    <div class="flex items-center text-sm text-gray-400">
                        <i class="fas fa-calendar-alt mr-2"></i>
                        <span id="current-date">15 de Abril, 2023</span>
                    </div>
                </div>

                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                        <tr class="text-left text-xs text-gray-400 border-b border-gray-700">
                            <th class="pb-3 pl-2">Hora</th>
                            <th class="pb-3">Servicio</th>
                            <th class="pb-3">Duración</th>
                            <th class="pb-3">Estado</th>
                            <th class="pb-3">Acciones</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (pagedAppointments.Items.Any())
                        {
                        foreach (var appointment in pagedAppointments.Items)
                        {
                        <!-- Esta es la línea que debes modificar/reemplazar -->
                        <tr @key="appointment.AppointmentId"
                            class="border-b border-gray-700 @GetRowClass(appointment)">

                            <td class="py-3 pl-2">
                    <span class="px-2 py-1 bg-primary/10 text-primary rounded text-xs">
                        @appointment.StartDateTime?.ToString("hh:mm tt")
                    </span>
                            </td>
                            <td class="py-3">@appointment.ServiceId</td>
                            <td class="py-3">
                                @{
                                var duration = appointment.EndDateTime - appointment.StartDateTime;
                                <text>@duration?.TotalMinutes min</text>
                                }
                            </td>
                            <td class="py-3">
                                @{
                                var realStatus = appointment.AppointmentStatus;
                                var statusDisplay = realStatus switch
                                {
                                AppointmentStatus.Pending => ("bg-yellow-100 text-yellow-800", "Pendiente"),
                                AppointmentStatus.Confirmed => ("bg-green-100 text-green-800", "Confirmada"),
                                AppointmentStatus.Cancelled => ("bg-red-100 text-red-800", "Cancelada"),
                                _ => ("bg-gray-100 text-gray-800", "Indefinido")
                                };
                                }
                                <span class="px-3 py-1 @statusDisplay.Item1 rounded-full text-xs font-medium">
                                    @statusDisplay.Item2
                                </span>
                            </td>
                            <td class="py-3">
                                <div class="flex space-x-2 items-center">
                                    @if (appointment.AppointmentStatus == AppointmentStatus.Pending)
                                    {
                                    <!-- Botón Confirmar -->
                                    <button class="text-green-500 hover:text-white relative"
                                            @onclick="() => ConfirmAppointment(appointment.AppointmentId, appointment.ServiceId)"
                                            disabled="@(isProcessing && currentProcessingId == appointment.AppointmentId)">
                                        <i class="fas fa-check-circle"></i>
                                        @if (isProcessing && currentProcessingId == appointment.AppointmentId)
                                        {
                                        <span class="absolute -right-5">
                                            <i class="fas fa-spinner fa-spin text-gray-500"></i>
                                        </span>
                                        }
                                    </button>

                                    <!-- Botón Cancelar -->
                                    <button class="text-red-500 hover:text-white"
                                            @onclick="() => CancelAppointment(appointment.AppointmentId)"
                                            disabled="@(isProcessing && currentProcessingId == appointment.AppointmentId)">
                                        <i class="fas fa-times-circle"></i>
                                    </button>
                                    }
                                    else if (appointment.AppointmentStatus == AppointmentStatus.Cancelled)
                                    {
                                    <span class="text-gray-500 text-sm">Cancelada</span>
                                    }
                                    else if (appointment.AppointmentStatus == AppointmentStatus.Confirmed)
                                    {
                                    <span class="text-green-500 text-sm">Confirmada</span>
                                    }
                                </div>
                            </td>
                        </tr>
                        }
                        }
                        else
                        {
                        <tr>
                            <td colspan="5" class="text-center py-4 text-gray-400">No hay citas disponibles.</td>
                        </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </div>
</div>

</body>

@code {
    private PagedResponse<AppointmentDTos> pagedAppointments = new();
    private int currentPage = 2;
    private int pageSize = 10;
    private bool isProcessing = false;
    private Guid? currentProcessingId = null;
    private System.Threading.Timer refreshTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
        refreshTimer = new System.Threading.Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await LoadAppointments();
                StateHasChanged();
            });
        }, null, 60000, 60000); // Actualiza cada 60 segundos
    }
    
    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
    
    private string GetRowClass(AppointmentDTos appointment)
    {
        return appointment.AppointmentStatus switch
        {
            AppointmentStatus.Confirmed => "confirmed-row",
            AppointmentStatus.Cancelled => "cancelled-row",
            _ => ""
        };
    }
    
    private async Task LoadAppointments()
    {
        var response = await _appointmentService.PaginationAppointmentsAsync(
            pageNumber: currentPage,
            pageSize: pageSize);

        if (response.Success)
        {
            // Crear nueva instancia para forzar actualización
            pagedAppointments = new PagedResponse<AppointmentDTos>
            {
                Items = new List<AppointmentDTos>(response.Data.Items), // Usar nuevo constructor
                TotalCount = response.Data.TotalCount,
                PageNumber = response.Data.PageNumber,
                PageSize = response.Data.PageSize
            };
        }
        else
        {
            pagedAppointments = new PagedResponse<AppointmentDTos>();
        }
        StateHasChanged(); // Forzar actualización de UI
    }
    
   private async Task ConfirmAppointment(Guid appointmentId, Guid serviceId)
{
    try
    {
        isProcessing = true;
        currentProcessingId = appointmentId;
        StateHasChanged(); // Actualizar UI para mostrar estado de carga

        var response = await _appointmentService.ConfirmAppointmentAsync(appointmentId, serviceId);
        
        if (response.Success)
        {
            // Actualizar estado local inmediatamente
            var appointment = pagedAppointments.Items.FirstOrDefault(a => a.AppointmentId == appointmentId);
            if (appointment != null)
            {
                appointment.AppointmentStatus = AppointmentStatus.Confirmed;
            }
            
            // Forzar actualización de la lista
            pagedAppointments.Items = new List<AppointmentDTos>(pagedAppointments.Items);
            StateHasChanged();
        }
    }
    finally
    {
        isProcessing = false;
        currentProcessingId = null;
        StateHasChanged();
    }
}

private async Task CancelAppointment(Guid appointmentId)
{
    try
    {
        isProcessing = true;
        currentProcessingId = appointmentId;
        StateHasChanged();

        // 1. Marcar como cancelado localmente primero
        var appointment = pagedAppointments.Items.FirstOrDefault(a => a.AppointmentId == appointmentId);
        if (appointment != null)
        {
            appointment.AppointmentStatus = AppointmentStatus.Cancelled;
            StateHasChanged();
        }

        // 2. Enviar solicitud al backend
        var response = await _appointmentService.CanceledAppointmentAsync(appointmentId);

        if (response?.Success == true)
        {
            // 3. Eliminar de la lista después de breve retraso
            await Task.Delay(500); // Pequeño retraso para feedback visual
            
            pagedAppointments.Items = pagedAppointments.Items
                .Where(a => a.AppointmentId != appointmentId)
                .ToList();
                
            pagedAppointments.TotalCount--;
            
            // Forzar actualización
            StateHasChanged();
        }
        else if (appointment != null)
        {
            // Revertir cambios si falla
            appointment.AppointmentStatus = AppointmentStatus.Pending;
            StateHasChanged();
        }
    }
    finally
    {
        isProcessing = false;
        currentProcessingId = null;
        StateHasChanged();
    }
}
    
    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}