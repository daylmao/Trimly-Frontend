@page "/barber/settings"
@using Trimly.Core.Application.DTOs.Account
@inject IAuthService AuthService
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = $"{nameof(Roles.Owner)},{"Barber"}")]

<body class="min-h-screen bg-background text-text">
<div class="flex h-screen overflow-hidden">
    <!-- Sidebar Actualizado -->
    <aside class="hidden md:flex md:flex-col w-64 bg-surface border-r border-gray-700">
        <!-- Logo -->
        <div class="p-4 border-b border-gray-700">
            <NavLink href="/" class="text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
                Trimly
            </NavLink>
        </div>

        <!-- Navigation -->
        <nav class="flex-1 overflow-y-auto py-4">
            <ul class="space-y-1 px-2">
                <li>
                    <NavLink href="/barber-dashboard" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
                        <i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i>
                        Dashboard
                    </NavLink>
                </li>
            </ul>

            <div class="mt-8 px-4">
                <h3 class="px-2 text-xs font-semibold text-gray-400 uppercase tracking-wider">
                    Configuración
                </h3>
                <ul class="mt-2 space-y-1">
                    <li>
                        <NavLink href="/barber/profile" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
                            <i class="fas fa-user-circle w-5 h-5 mr-3"></i>
                            Mi Perfil
                        </NavLink>
                    </li>
                    <li>
                        <NavLink href="/barber/settings" class="flex items-center px-4 py-2 text-sm rounded-md bg-primary/10 text-primary">
                            <i class="fas fa-cog w-5 h-5 mr-3"></i>
                            Ajustes
                        </NavLink>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- User Info Actualizado -->
        <div class="px-4 py-3 border-t border-gray-800/50">
            <div class="flex items-center justify-between">
                <div class="relative">
                    <div class="w-10 h-10 rounded-full bg-gradient-to-tr from-primary to-secondary flex items-center justify-center">
                        @if (!string.IsNullOrEmpty(_profileDto?.FirstName) || !string.IsNullOrEmpty(_profileDto?.LastName))
                        {
                            <span class="text-white text-sm font-medium">
                                @GetInitial(_profileDto?.FirstName)@GetInitial(_profileDto?.LastName)
                            </span>
                        }
                        else
                        {
                            <i class="fas fa-user text-white/90"></i>
                        }
                    </div>
                </div>

                <div class="flex-1 px-3 overflow-hidden">
                    <p class="text-sm font-medium tracking-wide text-gray-100 truncate">
                        @(_profileDto?.FullName ?? "Mi Cuenta")
                    </p>
                    <p class="text-xs text-gray-400 font-medium truncate">
                        Barbero
                    </p>
                </div>

                <button @onclick="Logout" class="p-2 rounded-full text-gray-400 hover:text-white transition-colors">
                    <i class="fas fa-arrow-right-from-bracket"></i>
                </button>
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Top Header -->
        <header class="bg-surface/80 backdrop-blur-md shadow-md z-10">
            <div class="px-4 py-4 flex justify-between items-center">
                <div>
                    <h1 class="text-xl font-semibold">Ajustes</h1>
                    <p class="text-sm text-gray-400">Configura tu cuenta y preferencias</p>
                </div>
            </div>
        </header>

        <!-- Main Content Area -->
        <main class="flex-1 overflow-y-auto bg-background p-4">
            <div class="max-w-4xl mx-auto">
                <!-- Mensaje de estado -->
                @if (!string.IsNullOrEmpty(_message))
                {
                    <div class="@(_isSuccess ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-4 py-3 rounded mb-4">
                        @_message
                    </div>
                }

                <!-- Sección de Cuenta -->
                <div class="bg-surface rounded-lg shadow-md p-6 mb-6">
                    <h2 class="text-lg font-semibold mb-4">Información de Cuenta</h2>

                    <EditForm Model="_updateAccountDto" OnValidSubmit="HandleSubmit">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                            <!-- Información Personal -->
                            <div class="md:col-span-2">
                                <h3 class="text-md font-medium mb-3 pb-2 border-b border-gray-700">Información Personal</h3>
                            </div>

                            <div>
                                <label for="first-name" class="block text-sm text-gray-400 mb-1">Nombre</label>
                                <InputText
                                    id="first-name"
                                    @bind-Value="_updateAccountDto.FirstName"
                                    class="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" />
                            </div>

                            <div>
                                <label for="last-name" class="block text-sm text-gray-400 mb-1">Apellidos</label>
                                <InputText
                                    id="last-name"
                                    @bind-Value="_updateAccountDto.LastName"
                                    class="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" />
                            </div>

                            <div>
                                <label for="username" class="block text-sm text-gray-400 mb-1">Nombre de usuario</label>
                                <InputText
                                    id="username"
                                    @bind-Value="_updateAccountDto.UserName"
                                    class="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-primary" />
                            </div>
                        </div>

                        <div class="flex justify-end space-x-3">
                            <button
                                type="button"
                                onclick="@(() => NavigationManager.NavigateTo("/barber-dashboard"))"
                                class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md text-sm"
                                disabled="@_isLoading">
                                Cancelar
                            </button>
                            <button
                                type="submit"
                                class="px-4 py-2 bg-primary hover:bg-primary/90 text-white rounded-md text-sm"
                                disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span>Guardando...</span>
                                }
                                else
                                {
                                    <span>Guardar Cambios</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </main>
    </div>
</div>
</body>

@code {
    private ProfileDTO _profileDto = new();
    private UpdateAccountDTO _updateAccountDto = new();  
    private string _message = string.Empty;
    private bool _isSuccess = false;
    private bool _isLoading = false;
    private bool _isDeleting = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadProfileData();
        _updateAccountDto = new();  
    }

    private async Task LoadProfileData()
    {
        try
        {
            var userId = await LocalStorage.GetItemAsync<string>("userId");
            var response = await AuthService.GetAccountDetailsAsync(userId);
        
            if (response.Success && response.Data != null)
            {
                _profileDto = response.Data;
                _updateAccountDto = new UpdateAccountDTO
                {
                    FirstName = response.Data.FirstName,
                    LastName = response.Data.LastName,
                    UserName = response.Data.UserName
                };
            }
        }
        catch (Exception ex)
        {
            _message = $"✖ Error al cargar perfil: {ex.Message}";
            _isSuccess = false;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task HandleSubmit()
    {
        _isLoading = true;
        _message = string.Empty;
        _isSuccess = false;
        StateHasChanged(); 
    
        try
        {
            var userId = await LocalStorage.GetItemAsync<string>("userId");
            var response = await AuthService.UpdateAccountProperties(_updateAccountDto, userId);

            _isSuccess = response.Success;
            _message = response.Success ? 
                "✔ Información actualizada correctamente" : 
                "✖ " + (response.Message ?? "Error al actualizar la información");

            if (response.Success)
            {
                // Actualizar los datos del perfil
                await LoadProfileData();
                await Task.Delay(3500);
                _message = string.Empty;
            }
        }
        catch (Exception ex)
        {
            _message = $"✖ Error: {ex.Message}";
            _isSuccess = false;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged(); 
        }
    }
    
    private string GetInitial(string name)
    {
        return !string.IsNullOrEmpty(name) ? name[0].ToString().ToUpper() : "";
    }
    
    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }
}