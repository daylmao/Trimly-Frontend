@page "/barber/profile"
@using Trimly.Core.Application.DTOs.Account
@inject IAuthService AuthService
@inject CustomAuthStateProvider CustomAuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<body class="min-h-screen bg-background text-text">
<div class="flex h-screen overflow-hidden">
  <!-- Sidebar -->
  <aside class="hidden md:flex md:flex-col w-64 bg-surface border-r border-gray-700">
    <!-- Logo -->
    <div class="p-4 border-b border-gray-700">
      <NavLink href="/" class="text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
        Trimly
      </NavLink>
    </div>

    <!-- Navigation -->
    <nav class="flex-1 overflow-y-auto py-4">
      <ul class="space-y-1 px-2">
        <li>
          <NavLink href="/barber-dashboard" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
            <i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i>
            Dashboard
          </NavLink>
        </li>
      </ul>

      <!-- Configuración Section -->
      <div class="mt-8 px-4">
        <h3 class="px-2 text-xs font-semibold text-gray-400 uppercase tracking-wider">
          Configuración
        </h3>
        <ul class="mt-2 space-y-1">
          <li>
            <NavLink href="/barber/profile" class="flex items-center px-4 py-2 text-sm rounded-md bg-primary/10 text-primary">
              <i class="fas fa-user-circle w-5 h-5 mr-3"></i>
              Mi Perfil
            </NavLink>
          </li>
          <li>
            <NavLink href="/barber/settings" class="flex items-center px-4 py-2 text-sm rounded-md hover:bg-gray-700">
              <i class="fas fa-cog w-5 h-5 mr-3"></i>
              Ajustes
            </NavLink>
          </li>
        </ul>
      </div>
    </nav>

    <!-- User Info -->
    <div class="px-4 py-3 border-t border-gray-800/50">
      <div class="flex items-center justify-between">
        <div class="relative">
          <div class="w-10 h-10 rounded-full bg-gradient-to-tr from-primary to-secondary flex items-center justify-center">
            @if (!string.IsNullOrEmpty(_profileDto?.FirstName) || !string.IsNullOrEmpty(_profileDto?.LastName))
            {
              <span class="text-white text-sm font-medium">
                @GetInitial(_profileDto?.FirstName)@GetInitial(_profileDto?.LastName)
              </span>
            }
            else
            {
              <i class="fas fa-user text-white/90"></i>
            }
          </div>
        </div>

        <div class="flex-1 px-3 overflow-hidden">
          <p class="text-sm font-medium tracking-wide text-gray-100 truncate">
            @(_profileDto?.FullName ?? "Mi Cuenta")
          </p>
          <p class="text-xs text-gray-400 font-medium truncate">
            Barbero
          </p>
        </div>

        <button @onclick="Logout"
                class="p-2 rounded-full text-gray-400 hover:text-white transition-colors"
                title="Cerrar sesión">
          <i class="fas fa-arrow-right-from-bracket"></i>
        </button>
      </div>
    </div>
  </aside>

  <!-- Loading Indicator -->
  @if (_isLoading)
  {
    <div class="fixed inset-0 flex items-center justify-center bg-black/50 z-50">
      <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
    </div>
  }

  <!-- Error Message -->
  @if (!string.IsNullOrEmpty(_errorMessage))
  {
    <div class="fixed top-4 right-4 p-4 bg-red-100 text-red-700 rounded-md shadow-lg z-50 max-w-md">
      @_errorMessage
    </div>
  }

  <!-- Main Content -->
  <div class="flex-1 flex flex-col overflow-hidden">
    <!-- Top Header -->
    <header class="bg-surface/80 backdrop-blur-md border-b border-white/5">
      <div class="px-6 py-4 flex justify-between items-center">
        <div>
          <h1 class="text-xl font-semibold">Mi Perfil</h1>
          <p class="text-sm text-gray-400">Administra tu información personal</p>
        </div>
        <NavLink href="/barber/settings" class="inline-flex items-center bg-primary/10 hover:bg-primary/20 text-primary px-4 py-2 rounded-lg transition-colors">
          <i class="fas fa-edit mr-2"></i>
          Editar Perfil
        </NavLink>
      </div>
    </header>

    <!-- Main Content Area -->
    <main class="flex-1 overflow-y-auto bg-background p-6">
      <div class="max-w-4xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Columna izquierda - Perfil -->
        <div class="lg:col-span-1">
          <div class="bg-surface border border-white/5 rounded-xl p-6 sticky top-6">
            <!-- Avatar dinámico -->
            <div class="flex flex-col items-center">
              <div class="relative mb-4">
                <div class="w-32 h-32 rounded-full bg-gradient-to-tr from-primary to-secondary flex items-center justify-center text-white text-4xl font-bold shadow-lg">
                  @if (!string.IsNullOrEmpty(_profileDto?.FirstName) || !string.IsNullOrEmpty(_profileDto?.LastName))
                  {
                    <span>@GetInitial(_profileDto?.FirstName)@GetInitial(_profileDto?.LastName)</span>
                  }
                  else
                  {
                    <i class="fas fa-user"></i>
                  }
                </div>
              </div>

              <h2 class="text-2xl font-bold text-center">@(_profileDto?.FullName ?? "Cargando...")</h2>
              <p class="text-primary mb-4">Barbero</p>
            </div>
          </div>
        </div>

        <!-- Columna derecha - Información -->
        <div class="lg:col-span-2 space-y-6">
          <!-- Información Personal -->
          <div class="bg-surface border border-white/5 rounded-xl p-6">
            <div class="flex items-center mb-4">
              <div class="bg-primary/10 text-primary p-2 rounded-lg mr-3">
                <i class="fas fa-user"></i>
              </div>
              <h3 class="text-lg font-semibold">Información Personal</h3>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="text-sm text-gray-400">Nombre</label>
                <p class="font-medium">@(_profileDto?.FirstName ?? "Cargando...")</p>
              </div>

              <div>
                <label class="text-sm text-gray-400">Apellido</label>
                <p class="font-medium">@(_profileDto?.LastName ?? "Cargando...")</p>
              </div>

              <div>
                <label class="text-sm text-gray-400">Correo electrónico</label>
                <p class="font-medium">@(_profileDto?.Email ?? "Cargando...")</p>
              </div>

              <div>
                <label class="text-sm text-gray-400">Teléfono</label>
                <p class="font-medium">
                  @if (!string.IsNullOrEmpty(_profileDto?.PhoneNumber))
                  {
                    @_profileDto.PhoneNumber
                  }
                  else
                  {
                    <span class="text-gray-500">No especificado</span>
                  }
                </p>
              </div>
            </div>
          </div>

          <!-- Información de Cuenta -->
          <div class="bg-surface border border-white/5 rounded-xl p-6">
            <div class="flex items-center mb-4">
              <div class="bg-primary/10 text-primary p-2 rounded-lg mr-3">
                <i class="fas fa-shield-alt"></i>
              </div>
              <h3 class="text-lg font-semibold">Información de Cuenta</h3>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="text-sm text-gray-400">Nombre de usuario</label>
                <p class="font-medium">@(_profileDto?.UserName ?? "Cargando...")</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>
</body>

@code {
    private ProfileDTO _profileDto;
    private bool _isLoading = true;
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfileData();
    }

    private async Task LoadProfileData()
    {
        try
        {
            var userId = await LocalStorage.GetItemAsync<string>("userId");
            var response = await AuthService.GetAccountDetailsAsync(userId);

            if (response.Success)
            {
                _profileDto = response.Data;
            }
            else
            {
                _errorMessage = response.ErrorMessage ?? "Error al cargar el perfil";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetInitial(string name)
    {
        return !string.IsNullOrEmpty(name) ? name[0].ToString().ToUpper() : "";
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login");
    }
}